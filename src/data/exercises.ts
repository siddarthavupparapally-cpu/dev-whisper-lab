import { ExerciseData } from '@/components/Exercise';

export const mockExercises: ExerciseData[] = [
  {
    id: '1',
    title: 'Hello World',
    description: 'Write a program that prints "Hello, World!" to the console. This is a classic first program in any programming language.',
    difficulty: 'beginner',
    language: 'Python',
    initialCode: '# Write your code here\n',
    expectedOutput: 'Hello, World!',
    hints: [
      'Use the print() function to output text',
      'Make sure to include the exact text "Hello, World!" with proper capitalization',
    ],
    completed: false,
  },
  {
    id: '2',
    title: 'Variable Assignment',
    description: 'Create a variable called "name" and assign it your name, then print a greeting message.',
    difficulty: 'beginner',
    language: 'Python',
    initialCode: '# Create a variable and print a greeting\nname = \n',
    expectedOutput: 'Hello, Alice!',
    hints: [
      'Assign a string value to the variable name',
      'Use string concatenation or f-strings to create the greeting',
      'The expected output shows "Alice" but you can use any name',
    ],
    completed: false,
  },
  {
    id: '3',
    title: 'Simple Calculator',
    description: 'Write a function that adds two numbers and returns the result.',
    difficulty: 'beginner',
    language: 'Python',
    initialCode: 'def add_numbers(a, b):\n    # Write your code here\n    pass\n\n# Test your function\nresult = add_numbers(5, 3)\nprint(result)',
    expectedOutput: '8',
    hints: [
      'Use the + operator to add the two parameters',
      'Return the result using the return statement',
      'Replace "pass" with your implementation',
    ],
    completed: false,
  },
  {
    id: '4',
    title: 'FizzBuzz',
    description: 'Write a program that prints numbers 1 to 15, but for multiples of 3 print "Fizz", for multiples of 5 print "Buzz", and for multiples of both print "FizzBuzz".',
    difficulty: 'intermediate',
    language: 'Python',
    initialCode: '# FizzBuzz implementation\nfor i in range(1, 16):\n    # Write your logic here\n    pass',
    expectedOutput: '1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz',
    hints: [
      'Use the modulo operator (%) to check divisibility',
      'Check for multiples of both 3 and 5 first',
      'Use if-elif-else statements for the conditions',
    ],
    completed: false,
  },
  {
    id: '5',
    title: 'List Comprehension',
    description: 'Create a list of squares of even numbers from 0 to 10 using list comprehension.',
    difficulty: 'intermediate',
    language: 'Python',
    initialCode: '# Create list of squares of even numbers\nsquares = \nprint(squares)',
    expectedOutput: '[0, 4, 16, 36, 64, 100]',
    hints: [
      'Use list comprehension syntax: [expression for item in iterable if condition]',
      'Check if a number is even using the modulo operator',
      'Square a number by multiplying it by itself or using ** 2',
    ],
    completed: false,
  },
  {
    id: '6',
    title: 'Recursive Fibonacci',
    description: 'Implement a recursive function to calculate the nth Fibonacci number.',
    difficulty: 'advanced',
    language: 'Python',
    initialCode: 'def fibonacci(n):\n    # Implement recursive Fibonacci\n    pass\n\n# Test with n=7\nresult = fibonacci(7)\nprint(result)',
    expectedOutput: '13',
    hints: [
      'Base cases: fibonacci(0) = 0, fibonacci(1) = 1',
      'Recursive case: fibonacci(n) = fibonacci(n-1) + fibonacci(n-2)',
      'Make sure to handle the base cases first',
    ],
    completed: false,
  },
];